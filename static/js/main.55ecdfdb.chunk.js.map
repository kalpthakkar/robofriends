{"version":3,"sources":["serviceWorker.js","components/ErrorBoundary.js","components/SearchBox.js","components/Card.js","components/CardList.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","SearchBox","searchChangeEvent","className","type","placeholder","onChange","Card","name","email","id","alt","src","ClassList","robots","map","user","i","key","App","updateSearchField","event","searchfield","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","CardList","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCKSC,E,kDApBd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,UAAU,GAHO,E,+DAOAC,EAAOC,GACzBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SAEN,6DAEDG,KAAKL,MAAMO,a,GAjBQC,aCmBbC,EAnBG,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,kBACnB,OACC,yBAAKC,UAAU,OACd,2BACCA,UAAU,wCAOVC,KAAK,SACLC,YAAY,gBACZC,SAAYJ,MCUDK,EAvBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACC,yBAAKP,UAAU,uDAYd,yBAAKQ,IAAI,SAASC,IAAG,+BAA0BF,EAA1B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCGOI,EAnBG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLP,GAAII,EAAOG,GAAGP,GACdF,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCgDRU,G,wDAtDd,aAAe,IAAD,8BACb,gBAcDC,kBAAoB,SAACC,GACpB,EAAKvB,SAAS,CAACwB,YAAaD,EAAME,OAAOC,SAdzC,EAAK/B,MAAQ,CACZqB,OAAQ,GACRQ,YAAa,IAJD,E,gEAQO,IAAD,OACnBG,MAAM,8CACLC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAW,EAAK/B,SAAS,CAACgB,OAAQe,S,+BAW/B,IAAD,EACuBhC,KAAKJ,MAA5BqB,EADA,EACAA,OAAQQ,EADR,EACQA,YAGVQ,EAAehB,EAAOiB,QAAO,SAACC,GACnC,OAAOA,EAAMxB,KAAKyB,cAAcC,SAASZ,EAAYW,kBAKtD,OAAInB,EAAOqB,OAOT,yBAAKhC,UAAU,UACd,wBAAIA,UAAU,UAAd,eACA,kBAAC,EAAD,CAAWD,kBAAqBL,KAAKuB,oBAGrC,kBAAC,EAAD,KACC,kBAACgB,EAAD,CAAUtB,OAAQgB,MAXd,wBAAI3B,UAAU,UAAd,c,GAnCQH,cCClBqC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAe,SN4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnD,GACLoD,QAAQpD,MAAMA,EAAMqD,a","file":"static/js/main.55ecdfdb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentsDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError)\r\n\t\t{\r\n\t\t\treturn <h1> Ooops! We got into an error </h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChangeEvent}) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input \r\n\t\t\t\tclassName=\" pa3 ba b--green bg-lightest-blue br3\" \r\n\t\t\t\t/*\r\n\t\t\t\t\tpa3\t\t\t\t\t(padding on all sides)\r\n\t\t\t\t\tba b--green \t\t(all sided border of color green)\r\n\t\t\t\t\tbg-lightest-blue\t(background color)\t\r\n\t\t\t\t\tbr3\t\t\t\t\t(rounded border)\r\n\t\t\t\t*/\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='Search Robots' \r\n\t\t\t\tonChange = {searchChangeEvent} \t\t\t/*onChange eventListner calls searchChangeEvent*/\r\n\t\t\t/>\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn (\r\n\t\t<div className='bg-light-green dib br3 pa2 ma3 grow bw2 shadow-5 tc'> \r\n\t\t {/*\tDocumentation: https://tachyons.io/docs/\r\n\t\t \tbg-light-green \t(changes background color of that div)\r\n\t\t \tdib \t\t\t(display: inline-block)\r\n\t\t\tbr3\t\t\t\t(border-radius)\r\n\t\t\tpa3\t\t\t\t(padding)\r\n\t\t\tma2\t\t\t\t(margin)\r\n\t\t\tgrow\t\t\t(It is an animation :hover)\r\n\t\t\tbw2\t\t\t\t(border width) Reference: https://tachyons.io/docs/themes/borders/\r\n\t\t\tshadow-5\t\t(Adding shadow) Reference: https://tachyons.io/docs/themes/box-shadow/\r\n\t\t\ttc \t\t\t\t(text center)\r\n\t\t */}\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst ClassList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t {\r\n\t\t \trobots.map((user, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t }\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ClassList;","import React, { Component } from 'react';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport './App.css';\r\n\r\nclass App extends Component {\t\t\t/*Class is created for making a constructor*/\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\t\t\t\t\t/*Initial State*/\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> { return response.json() })\r\n\t\t.then(users => { this.setState({robots: users}) });\r\n\t}\r\n\t/*Fetching user_robots from database & then updating the state*/\r\n\r\n\tupdateSearchField = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t}\r\n\t/*this keyword in function definition will pass updated search value into updateSearchField\r\n\t   function and, event is taken as parameter.\r\n\t   this.setState is used to update the searchfield, which was firstly initialized in constructor.*/\r\n\r\n\trender() {\r\n\t\tconst { robots, searchfield} = this.state\r\n\t\t/*v3 addition: this.state.robots replaced with just robots and \r\n\t\t  globally initialized with this.state (similar for searchfield)*/\r\n\t\tconst filterRobots = robots.filter((robot) => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t\t})\r\n\t\t/*The filterRobots function will compare robots with and updated value of searchfield and will \r\n\t\t   filter robots. However by-default, all robots will be displayed as present in constructor*/\r\n\t\t\r\n\t\tif(!robots.length) /*If robots.length is 0, the not operator will make it true and if statement executes*/\r\n\t\t{\r\n\t\t\treturn <h1 className=\"tc pt2\">Loding</h1>\r\n\t\t}\r\n\t\telse\r\n\t\t{\t\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"tc pb4\">\r\n\t\t\t\t\t<h1 className=\"f2 pt3\">RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChangeEvent = {this.updateSearchField} />\t\r\n\t\t\t\t\t{/*A searchChangeEvent function gets executed by SearchBox.js \r\n\t\t\t\t\t   using onChange method i.e. whenever searchfield is changed (Goto updateSearchField)*/}\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots={filterRobots}/>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</div>\r\n\t\t\t);\t\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}